<?xml version="1.0" encoding="UTF-8"?>
<project name="jrdf" default="dist" basedir=".">

    <import file="build-setup.xml"/>
    <import file="build-sparql.xml"/>
    <import file="build-ntriples.xml"/>

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <target name="gen-src" depends="gen-sparql-parser, gen-ntriples-parser"/>

    <target name="checkstyle">
        <checkstyle config="conf/checkstyle.xml">
            <fileset dir="${prod.src.dir}"/>
        </checkstyle>
    </target>

    <target name="compile" depends="checkstyle, -compile"/>

    <target name="-compile" depends="gen-src">
        <compile.macro src.dir="${gen.src.dir}" classpath.ref="gen.class.path" output.dir="${prod.classes.dir}"
                       code.path="gen.code.path" code.pattern="production.code.pattern"
                       compiler.args="-Xlint:-unchecked"/>
        <compile.macro src.dir="${prod.src.dir}" classpath.ref="production.class.path" output.dir="${prod.classes.dir}"
                       code.path="production.code.path" code.pattern="production.code.pattern"/>
        <compile.macro src.dir="${test.src.dir}" classpath.ref="test.class.path" output.dir="${test.classes.dir}"
                       code.path="test.code.path" code.pattern="test.code.pattern"/>
        <!-- Configuration for Wiring up the various components using Spring -->
        <copy file="conf/wiring.xml" todir="${prod.classes.dir}"/>

        <!-- Test data used by the RDF/XML Writer -->
        <copy todir="${prod.classes.dir}">
            <fileset dir="${test.src.dir}" includes="**/*.rdf"/>
        </copy>
    </target>

    <macrodef name="compile.macro">
        <attribute name="src.dir"/>
        <attribute name="output.dir"/>
        <attribute name="classpath.ref"/>
        <attribute name="code.path"/>
        <attribute name="code.pattern"/>
        <attribute name="compiler.args" default="-Xlint"/>
        <sequential>
            <mkdir dir="@{output.dir}"/>
            <javac source="${java.src.version}" srcdir="@{src.dir}" destdir="@{output.dir}"
                   classpathref="@{classpath.ref}"
                   debug="${compile.debug}" debuglevel="${compile.debuglevel}" deprecation="${compile.deprecation}"
                   optimize="${compile.optimize}">
                <src>
                    <path refid="@{code.path}"/>
                </src>
                <patternset refid="@{code.pattern}"/>
                <compilerarg value="@{compiler.args}"/>
            </javac>
            <echo message="Got: ${emma.enabled}"/>
            <emma enabled="${emma.enabled}">
                <instr instrpath="@{output.dir}" destdir="${out.instr.dir}/classes"
                       metadatafile="${coverage.dir}/metadata.emma" merge="true"/>
            </emma>

        </sequential>
    </macrodef>

    <target name="dist" depends="compile,-copy-sparql-sablecc-resources,-copy-ntriples-sablecc-resources">
        <mkdir dir="${dist.dir}"/>
        <jar destfile="${dist.dir}/${project.jar}">
            <fileset dir="${prod.classes.dir}"/>
        </jar>
    </target>

    <target name="javadoc" depends="-compile">
        <mkdir dir="${javadoc.dir}"/>
        <javadoc destdir="${javadoc.dir}" author="true" version="true"
                 packagenames="org.jrdf.*"
                 sourcepath="${prod.src.dir}"
                 classpath="${prod.classes.dir}"
                 failonerror="true"
                 additionalparam="-breakiterator" Use="true"
                 source="${java.src.version}"
                 windowtitle="${project.longname} Framework ${project.version.full}"
                 doctitle="${project.longname} Framework ${project.version.full}">
            <excludepackage name="org.jrdf.sparql.parser.analysis"/>
            <link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
        </javadoc>
    </target>

    <target name="test" depends="unit-test,integration-test"/>
    <target name="unit-test" depends="dist">
        <test.macro type="unit"/>
    </target>
    <target name="integration-test" depends="dist">
        <test.macro type="integration"/>
    </target>
    <target name="emma-unit-test" depends="emma, dist">
        <emma.test.macro type="unit"/>
    </target>

    <target name="emma" description="turns on EMMA instrumentation/reporting">
        <mkdir dir="${out.instr.dir}"/>
        <mkdir dir="${coverage.dir}"/>
        <property name="emma.enabled" value="true"/>
    </target>

    <macrodef name="test.macro">
        <attribute name="type"/>
        <sequential>
            <mkdir dir="${@{type}.test.results.dir}"/>
            <junit failureproperty="@{type}.test.failed" fork="true" forkmode="perBatch">
                <classpath refid="@{type}.test.class.path"/>
                <formatter type="brief" usefile="false"/>
                <batchtest todir="${@{type}.test.results.dir}">
                    <fileset refid="@{type}.test.code.fileset"/>
                </batchtest>
            </junit>
            <fail if="@{type}.test.failed" message="@{type} tests failed."/>
        </sequential>
    </macrodef>

    <macrodef name="emma.test.macro">
        <attribute name="type"/>
        <sequential>
            <mkdir dir="${@{type}.test.results.dir}"/>
            <junit failureproperty="@{type}.test.failed" fork="true" forkmode="perBatch">
                <classpath refid="@{type}.test.class.path"/>
                <formatter type="brief" usefile="false"/>
                <batchtest todir="${@{type}.test.results.dir}">
                    <fileset refid="@{type}.test.code.fileset"/>
                </batchtest>
                <jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma"/>
                <formatter type="xml"/>
                <formatter type="brief" usefile="false"/>
            </junit>
            <fail if="@{type}.test.failed" message="@{type} tests failed."/>
            <emma enabled="${emma.enabled}">
                <report sourcepath="${prod.src.dir}" depth="method">
                    <fileset dir="${coverage.dir}">
                        <include name="*.emma"/>
                    </fileset>
                    <html outfile="${coverage.dir}/coverage.html"/>
                </report>
            </emma>
        </sequential>
    </macrodef>

    <target name="jester" depends="dist">
        <delete dir="${modified.src.dir}"/>
        <copy todir="${modified.src.dir}">
            <fileset dir="${src.dir}">
                <exclude name="**/*Test.java"/>
                <exclude name="**/AllTests.java"/>
            </fileset>
        </copy>
        <java classpathref="test.class.path" classname="jester.TestTester" fork="true">
            <!-- FIXME TJA: Use the value of a property to set the classpath here -->
            <arg value="-cp=lib/junit-3.8.1.jar:lib/jester-1.3.7.jar:build/dist/jrdf-0.4.jar:build/test-classes"/>
            <arg value="-Dswing.defaultlaf=javax.swing.plaf.metal.MetalLookAndFeel"/>
            <arg value="org.jrdf.graph.mem.GraphImplUnitTest"/>
            <arg value="${modified.src.dir}/java"/>
        </java>
    </target>
</project>
