Package org.jrdf.urql.parser;

/*
 * SPARQL Query Language for RDF SableCC grammar.
 * $Id$
 */

Helpers
  character     = [0..0xFFFF];
  letter        = ['a'..'z'] | ['A'..'Z'];
  digit         = ['0'..'9'];
  tab           = 9;
  lf            = 10;
  cr            = 13;
  dbquote       = 34;
  quote         = 39;
  sl            = 47;
  eol           = cr | lf | cr lf;
  whitespace    = ' ' | tab | lf | cr;
  nonblank      = [33..126];
  nonquote      = [character - [quote + '\']];
  nondbquote    = [character - [dbquote + '\']];
  nonslash      = [[33..126] - sl];
  echar         = 't' | 'b' | 'n' | 'r' | 'f' | '\' | dbquote | quote;
  pn_chars_base = letter | [0x00C0..0x00D6] | [0x00D8..0x00F6] | [0x00F8..0x02FF] | [0x0370..0x037D] |
                  [0x037F..0x1FFF] | [0x200C..0x200D] | [0x2070..0x218F] | [0x2C00..0x2FEF] | [0x3001..0xD7FF] |
                  [0xF900..0xFDCF] | [0xFDF0..0xFFFD] | [0x10000..0xEFFFF];
  pn_chars_no   = pn_chars_base | digit;
  pn_chars_dot  = pn_chars_base | '.';
  pn_chars_u    = pn_chars_base | '_';
  pn_chars_u_no = pn_chars_base | '_' | digit;
  pn_chars      = pn_chars_u | '-' | digit | 0x00B7 | [0x0300..0x036F] | [0x203F..0x2040];

Tokens
  prefix      = 'PREFIX';
  base        = 'BASE';
  select      = 'SELECT';
  where       = 'WHERE';
  union       = 'UNION';
  optional    = 'OPTIONAL';
  filter      = 'FILTER';

  variableprefix = '?' | '$';
  blanks         = whitespace+;
  comment        = '#' ([character - [lf + cr]])* eol;
  terminator     = ';';
  colon          = ':';
  lpar           = '{';
  rpar           = '}';
  starturl       = '<';
  endurl         = '>';
  period         = '.';
  expon          = 'e' | 'E';
  plusminus      = '+' | '-';
  urlchar        = [character - ['>' + '<']];
  letter         = letter;
  pn_chars_base  = pn_chars_base;
  pn_chars_no    = pn_chars_no;
  pn_chars_dot   = pn_chars_dot;
  pn_chars_u     = pn_chars_u;
  pn_chars_u_no  = pn_chars_u_no;
  pn_chars       = pn_chars;
  integer        = digit+;
  decimal        = digit+ '.' digit* | '.' digit+;
  double         = digit+ ('.' digit*) | '.' digit+ | digit+;
  asterisk       = '*';
  qescape        = '\';
  at             = '@';
  dash           = '-';
  alphanumeric   = letter | digit;
  datatypeprefix = '^^';
  quote          = quote;
  dbquote        = dbquote;
  echar          = echar;
  trueorfalse    = 'true' | 'false';

Ignored Tokens
  blanks, comment;

Productions
  start =
    query_types;

  query_types =
    {select} select_query;

  prologue =
    {prefixdecl} basedecl? prefixdecl* ;

  resource =
    starturl urlchar* endurl; 

  basedecl =
    {prefix} base resource ;

  prefixdecl =
    {prefix} prefix pname_ns? colon resource ;

  pname_ns =
    pname_prefix? colon;

  pname_ls =
    pname_ns pname_local?;

  pname_local =
    pn_chars_no pn_chars_dot* pn_chars; 

  pname_prefix =
    pn_chars_base pname_rest? ;

  pname_rest =
    pn_chars_dot* pn_chars ;

  select_query =
    select_clause;

  select_clause =
    {wildcard} select variable+ ;

  old_select_clause =
    {variable_list} select variable+ |
    {wildcard} select asterisk ;

  where_clause =
    where?;

  group_graph_pattern =
    lpar graph_pattern rpar ;

  graph_pattern =
    {filtered_basic_graph_pattern} filtered_basic_graph_pattern operation_pattern? ;

  filtered_basic_graph_pattern =
    {block_of_triples} block_of_triples? ;

  block_of_triples =
    triple period? more_triples* ;

  more_triples =
    triple period? ;

  operation_pattern =
     {graph_pattern_or_filter_graph_pattern} graph_pattern_or_filter period? graph_pattern ;

  graph_pattern_or_filter =
    {graph_pattern_not_triples} graph_pattern_not_triples |
    {filter_pattern} filter_pattern;

  graph_pattern_not_triples =
    {optional_graph_pattern} optional_graph_pattern |
    {group_or_union_graph_pattern} group_or_union_graph_pattern ;

  optional_graph_pattern =
    optional group_graph_pattern ;

  group_or_union_graph_pattern =
    group_graph_pattern union_graph_pattern* ;

  union_graph_pattern =
    union group_graph_pattern ;

  filter_pattern =
    filter;

  triple =
    [subject]:resource_triple_element [predicate]:resource_triple_element [object]:object_triple_element ;

  resource_triple_element =
    {resource} resource |
    {prefixname} prefixname |
    {variable} variable ;

  object_triple_element =
    {resource} resource |
    {prefixname} prefixname |
    {variable} variable |
    {literal} literal  ;

  prefixname =
      {pname1} pname_ls |
      {pname2} pname_ns ;

  variable =
    variableprefix variablename;

  variablename =
    pn_chars_u_no pn_chars*; 

  literal =
    {rdf_literal} rdf_literal |
    {numeric_literal} numeric_literal |
    {boolean_literal} boolean_literal;

  rdf_literal =
    {untyped_literal} literal_value |
    {lang_literal} literal_value [language]:langtag |
    {typed_literal} literal_value datatype ;

  langtag =
    at letter+ sublang*;

  sublang =
    dash alphanumeric+;

  literal_value =
      {quoted_literal} [opening_quote]:quote lexical_value [closing_quote]:quote |
      {db_quoted_literal} [opening_db_quote]:dbquote lexical_value [closing_db_quote]:dbquote;

  lexical_value =
    lexical_character* ;

  lexical_character =
    {letter} letter |
    {escaped} qescape echar ;

  datatype =
    {resource_datatype} datatypeprefix resource |
    {qname_datatype} datatypeprefix prefixname;

  numeric_literal =
    {unsigned_numeric_literal} unsigned_numeric_literal;

  unsigned_numeric_literal =
    {integer} integer |
    {decimal} decimal |
    {double} double exponent;

  exponent =
     expon plusminus? integer;

  boolean_literal = trueorfalse;
