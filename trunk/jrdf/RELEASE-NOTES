JRDF Release 0.4
================
* Finished converting over to use Generics and Java 1.5 (Feature 1238378).
* Began work on SPARQL support, graph and relational operations.
* Began work on a NTriples parser.
* Using an iterator from the result of a find to remove nodes from the
same graph no longer produces a concurrent modification exception 
(Bug 1457621). 
* NTriple escaping now correctly handles surrogates in Java 1.5. (Bug 1364927).
* Large XML Literals are now correctly parsed (Bug 1362611).
* Fixed incorrect resolving of relative URIs correctly (Bug 1315291).
* Fixed processing stacked xml:base directives with relative URIs
(Bug 1314147).
* The createTriple method was moved to be on TripleFactory (Bug 1294602).
* Removed the use of nulls as valid parameters in finds for example (Bug 1265743).
* MemNode now extends Node (Bug 1243510).

JRDF Release 0.3.4.1
====================
* Fixed build problems (Bug 1314770).
* Back ported stack xml:base directives with relative URIs not processed
(Bug 1314750).
* Does not resolve relative URIs correctly (Bug 1315285).

JRDF Release 0.3.4
==================
* Initial work on remote querying and SPARQL support (RFE 1236476).
* Added port of Sesame's RIO RDF/XML parser and associated interfaces (RFE
1075768).
* Added protected constructor to Literals (RFE 1075771).
* Added close method to graphs (RFE 1075740).
* Added ability to generate globally unique IDs for blank nodes (RFE 1048971).
* No exception thrown when calling remove before next. (Bug 1231518).
* Parsing RDF/XML literals removes spaces (Bug 1116687).
* Literals should return n3 when toString is called, getEscapedForm return
properly escape n3.  (Bug 1077343).
* Serial version (Bug 1048968) and protected constructors added to
AbstractLiteral (Bug 1059228).
* Javadoc enhanced, general style improved, build files refactored and
preparation for move to Java 1.5 (Generics and Concurrency).

JRDF Release 0.3.3
==================
* Reification prevented from existing statements (Bug 1034837).  Reification
should not add the statement being reified.

JRDF Release 0.3.2
==================
* Bug fixes to the in memory implementation including
serialization/deserialization (Bug 1020911) and Literal equality (Bug 1016576).
* All nodes for the in memory implementation are now localized (RFE 1016579)
allowing any JRDF object to be added/removed or used in a find/contains.
This should be the semantics for all implementations of Graph.
* The iterators returned by the in memory Graph implementation can now have
remove called on them (RFE 1027563).

JRDF Release 0.3.1
==================
* Bug fixes to the in memory implementation: creating the same Literal by
value resulted in a different node ID (1014115) and preventing one in
memory graph adding nodes to another in memory graph (1014054).
* Updated javadoc for Graph.

JRDF Release 0.3
================
* New memory implementation by Paul Gearon.
* Abstract unit tests to test implementations.
* Split out NodeFactory into TripleFactory and GraphElementFactory.
* Added Container (Bag, Alternative and Sequence support) and Collection
support.
* Added visitor pattern for typed nodes (URIReference, BlankNode and
Literals).
* Creating literals is restricted to only valid construction: lexical value,
lexical value and datatype or lexical value and language.
* AbstractLiteral now has a getEscapedForm which returns an N-Triples
escaped version of the Literal.  The toString now simply returns
getLexicalValue (no escaping).
* Modified AbstractURIReference to allow unchecked URIs to be added.
* Added AbstractBlankNode.

JRDF Release 0.2.1
==================
* AbstractLiteral has improved toString.
* AbstractURIReference has a constructor that enforces a non-null URI.
* Graph now has find, getNumberOfTriples and isEmpty methods.
* Triple and Nodes are now Serializable.
* NodeFactory now supports reification.
* Added ClosableIterator for results.
* Added RDF and RDFS vocabularies.

JRDF Release 0.2
================
* Node, SubjectNode, PredicateNode and ObjectNode marker interfaces.
* Renaming of Statement to Triple and other renaming.
* Defining hashCode and equals.
* Refication added to NodeFactory.