JRDF Release 0.5.6.1
====================
* Implement SPARQL 1.1 RESTful graph management (Feature 3009049).
* Added greater than support for filter (Bug 2981067, Feature Tracking
 2024302).
* RDF/XML Writer now allows local namespaces with the
 org.jrdf.writer.rdfxml.writeLocalNamespace property (Feature 3009057).
* Added ClosableIterators.with to automatically closed iterators
 (Feature 3009066).
* Add manual sync/close to Graph instead of relying on the factories
 (Bug 2059127).
* Unbound results caused a null pointer exception when serializing results
 (Bug 2978000).
* SPARQL Grammar incorrectly parsing URIs as relational operations
 (Bugs 2969667, 2981067).
* N3 Parser renamed Turtle - still incomplete support (Bug 3009051).
* Added null check around non-existent graphs in REST interface (Bug 3009054).
* BigInteger to Integer Value mapping was incorrect (Bug 3009060).

JRDF Release 0.5.6
==================
* JSON SPARQL Parser and Writer support (Feature 2900728).
* Calling find uses more and more disk space (Bug 2900731).
* Make the SPARQL query clients able to use URIs to specify endpoints
 (Bug 2900734).
* Path for SPARQL endpoint should use graph not graphs (Bug 2900737).
* Refactor SortMerge so that it can be made disk based and possibly lazy
 (Bug 2900740).
* TypeValueImpl equal is wrong (Bug 2827711).
* Upgrade to use JUnit 4 tests, Hamcrest, Powermock and other libraries
 (Feature 2900764).

JRDF Release 0.5.5.5
====================
* Removal of ValueOperations with introduction of new FILTER implementation (Feature 2820351).
* Significant performance increase with new merge join operations. (Feature 2820350).
* ASK query support (Feature 2820352).
* Create Groovy RDF Builder (Feature 2820362).
* N3 Parser and SPARQL Benchmarking (Feature 2820363).
* Follows SPARQL rather than Relational semantics for empty graph patterns (Bug 2405529).
* RdfWriter has the wrong kinds of exceptions (Bug 2302897).
* Make Checked Exceptions Unchecked (Bug 2820359).
* Java 6 sTaX (XML Pull Parser) has different behavior than Woodstox causing a problem with XML Literal writing
  (Bug 2272447).
* Multiple calls to find do not release memory (Bug 2820364).

JRDF Release 0.5.5.4
====================
* Distribute Server and Local Server for returning SPARQL query results (Feature 2037365, 2059027, and 2148831).
* Streaming Answer Support (Feature 2165388).
* BOUND Support for FILTER (Feature 2183625).
* Configurable temporary directory (Feature 2148621).
* Automatically close iterator when reaching the end and support
 iterable (Feature 2072884 and 2072993).
* Upgraded JAR (Feature 2148830).
* Increase indexing performance for Molecule Store (Feature 2059023).
* QueryFactoryImpl produces incorrect LeftOuterJoin (Bug 2183576).
* SPARQL parser does not support multiple operation patterns (Bug 2173164).
* RdfXmlWriter failed to support xml literals correctly (Bug 2158131).
* Graph findResource() doesn't return resource (Bug 2113206).
* Interfaces made more consistent and use correct return types
 (Bug 2061469).
* addNewGraph(String) on persistent graphs creates graphs with the same
 name (Bug 2059077).
* Sync() not being called on BTrees (Bug 2059002).
* Abstract literal did not return datatype (Bug 2052314).

JRDF Release 0.5.5.3
====================
* FILTER optimized (Bug 2045977).
* AttributeValuePair replaced with Map<Attribute, ValueOperation>
 (Bug 2045670).
* Prefixes do not work in FILTER (Bug 2037291).

JRDF Release 0.5.5.2
====================
* Some initial work to support SPARQL FILTER.  Currently only STR matching
 and not matching (Feature 2024302).
* Now supports literal matching and the syntactic sugar for integers,
 booleans, etc (Bug 1544836).
* Ability to count number of molecules in a molecule store (Feature 2023271).
* Various bugs in graph and molecule store (Bugs 2027360, 2024295, 2024247,
 2024233, 2024201).

JRDF Release 0.5.5.1
====================
* Permanent graph support (Feature 2002188).
* Text based serialization for RDF Molecules (Feature 2008522).
* Helper classes to make reading and writing RDF/XML and NTriples
 easier and made a GraphNTriplesParser (Feature 2008521, 2008398).
* Indexes now use arrays of longs instead of maps (Feature 2007260).
* IllegalArgumentException being thrown for empty graph pattern
 (Bug 2002895).
* Non-sorted graph does not pass all graph tests (Bug 2006458).
* MoleculeStructureIndexSesame was writing incorrect number of values
 to the index (Bug 2008520).

JRDF Release 0.5.5
==================
* On disk and in memory molecule store (Features 2002186, 1909228,
Bug 1801786).
* NTriples writer added (Feature 2000374).
* asTriple added to Resource interface (Feature 1959980).
* RDF/XML bugs fixed (Bugs 2001304, 2000473, 1984052, 1781970, 1748821).
* Triple factory missed Resource creation method (Bug 1887286).
* SPARQL renamed URQL and supports empty graph pattern following
relational algebra (Feature 1944565, 1944576).
* Jars upgraded for BDB JE, Spring RCP and Woodstox (Feature 1996596).
* db4o is removed due to OutOfMemory exceptions (Feature 1944567).

JRDF Release 0.5.4
==================
* Added easy to use methods on Resource to allow properties to be added/
 removed more easily (Bug 1852616).
* Fixed ConcurrentModificationException when using Sesame BTree (Bug 1879194).
* Removed serialisation of Graph, added better exception when foreign bnode
 is added, and moved classes from org.jrdf.local.mem if they were no longer
 memory bound (Bug 1886638, 1884141, 1883251).

JRDF Release 0.5.3
==================
* Consolidated find methods for node types.  Allow findNodes(NodeType) and
 findResources(ValueNodeType) (Feature 1876230).
* Improved performance for node type queries now use the maps in the
 NodeTypePool rather than filtering (Feature 1783776).
* Improved performance (100 times) of find() with on disk implementation
 (SortedDiskJRDFFactory) (Bug 1877861).
* Allows URIReferences and Literals to be added across one graph to another
 without using GraphElementFactory (Bug 1874230).
* TripleImpl moved to top level graph package as it is a global and local
 class (Bug 1868957).
* TripleFactory lacked an addTriple(URI, URI, Object) (Bug 1866496).
* Wrong types returned by methods (Bug 1866490 and 1866488).
* TripleImpl shouldn't allow null values (Bug 1852071).
* findUniquePredicate() did not count subjects that matched (Bug 1841443).
* RDF/XML parser failed to handle empty rdf:datatype element (Bug 1840082).
* db4o can now be used as a blank node map (Bug 1829741).

JRDF Release 0.5.2
==================
* Improved performance and scalability of on disk implementation with
 SortedDiskJRDFFactory.  Supports reading and writing large RDF/XML
 files with over 1 million triples (Feature 1835709).
* Add on disk set implementation (Feature 1835709).
* Modified Graph interface from getUniquePredicates and get node type
 to find (Bug 1835711).

JRDF Release 0.5.1
==================
* Added db4o implementation and improved Bdb implementation.
* Added Graph copying between two local graphs (Feature 1805283).
* Added Resource creation on GraphElementFactory (Feature 1805285).
* Fixed confusing semantics of getNewGraph on factories.  Previously,
it would create a new graph object with the same indices and
node/string pools.  Now it creates new indices and node/string pools.
(Bug 1821049).
* Fixed behaviour of equality of resources (Bug 1783063).
* getValue() on literals not returns the underlying Java class -
getDatatypeValue() has been added to return the wrapper class
(Bug 1793803).
* Fixed bugs associated with data types including: equals on
some datatypes was missing or incorrect and serialization
(Bug 1793814, 1802351).
* BdbFactory bugs fixed (Bugs 1793822, 1827349).
* Remove and close incorrectly implemented (Bug 1793822).
* Inefficient creation of RDF/XML (Bug 1800829).
* Allowed correct serialization of Answers (Bug 1802319).
* Creation of NullURI instead of returning null when calling
getURI on a blank node resource (Bug 1805264).

JRDF Release 0.5.0
==================
* First support for Java 6.  Will run under Java 5 but requires StAX library
  for RDF/XML writer.
* Datatype support with support for all XSD builtin datatypes except
  base64Binary, hexBinary, and NOTATION and derived types nonPositiveInteger,
  nonNegativeInteger, integer, long, int, short and byte (Feature 1748820).
* Resource interface - allows nodes to be treated as both Subject and
  Objects.  Also supports gets/finds, adds and deletes (Feature 1766052).
* Persistent maps using Berkeley DB Java edition (Feature 1766047).  Requires
  Berkeley DB jar.
* Node type operations on graph to allow getting unique predicates,
  resources, blank nodes and uri references (Feature 1778255).
* Modifications to Literal interface.  Includes isXXX for which type of
  literal it is and use of datatypes and value interface (Feature 1751594).
* Add clear and close method to maps (Feature 1758597).
* Corrected escaping of RDF/XML writer (Bug 1762434).
* Removed use of null in AbstractLitearl (Bug 1751593).

JRDF Release 0.4.1.1
====================
* Fixed JRDFModelImpl re-wires components (Bug 1731097).
* Fixed error in SortedMemoryJRDFFactoryImpl (Bug 1731094).

JRDF Release 0.4.1
==================
* Initial SPARQL: PREFIX, SELECT, WHERE, OPTIONAL, . (JOIN) and UNION
  supported (Feature 1236476).
* User interface for SPARQL Querying (Feature 1505272).
* Allows sorted results from the Graph API's find() method (Feature 1475502).
* RDF/XML Writer by Robert Turner (Feature 1499471).
* Push and Pull NTriples parser (Feature 1669796).
* Added visit(Node) (Feature 1624471).
* Fixed lazy implementation of Hashcode and Equals (Bug 1564442).
* Now displays the line number when creating a URI from an RDF/XML file
  fails (Bug 1564355).
* Changed to use Java 1.5 UUID generator instead of own implementation
  (Bug 1560109).
* Fixed JrdfExample (Bug 1467546).
* Fixed AbstractTriple.equals handling null nodes (Bug 1273310).

JRDF Release 0.3.4.3
====================
* Still doesn't parser XML Literals correctly - can fail to parse who
triples due to not flushing the output stream. Due to typo (and no test).
(Bug 1511751).

JRDF Release 0.4
================
* Finished converting over to use Generics and Java 1.5 (Feature 1238378).
* Began work on SPARQL support, graph and relational operations.
* Began work on a NTriples parser.
* Using an iterator from the result of a find to remove nodes from the
same graph no longer produces a concurrent modification exception
(Bug 1457621).
* NTriple escaping now correctly handles surrogates in Java 1.5. (Bug 1364927).
* Large XML Literals are now correctly parsed (Bug 1362611).
* Fixed incorrect resolving of relative URIs correctly (Bug 1315291).
* Fixed processing stacked xml:base directives with relative URIs
(Bug 1314147).
* The createTriple method was moved to be on TripleFactory (Bug 1294602).
* Removed the use of nulls as valid parameters in finds for example (Bug 1265743).
* MemNode now extends Node (Bug 1243510).

JRDF Release 0.3.4.1
====================
* Fixed build problems (Bug 1314770).
* Back ported stack xml:base directives with relative URIs not processed
(Bug 1314750).
* Does not resolve relative URIs correctly (Bug 1315285).

JRDF Release 0.3.4
==================
* Initial work on remote querying and SPARQL support (RFE 1236476).
* Added port of Sesame's RIO RDF/XML parser and associated interfaces (RFE
1075768).
* Added protected constructor to Literals (RFE 1075771).
* Added close method to graphs (RFE 1075740).
* Added ability to generate globally unique IDs for blank nodes (RFE 1048971).
* No exception thrown when calling remove before next. (Bug 1231518).
* Parsing RDF/XML literals removes spaces (Bug 1116687).
* Literals should return n3 when toString is called, getEscapedForm return
properly escape n3.  (Bug 1077343).
* Serial version (Bug 1048968) and protected constructors added to
AbstractLiteral (Bug 1059228).
* Javadoc enhanced, general style improved, build files refactored and
preparation for move to Java 1.5 (Generics and Concurrency).

JRDF Release 0.3.3
==================
* Reification prevented from existing statements (Bug 1034837).  Reification
should not add the statement being reified.

JRDF Release 0.3.2
==================
* Bug fixes to the in memory implementation including
serialization/deserialization (Bug 1020911) and Literal equality (Bug 1016576).
* All nodes for the in memory implementation are now localized (RFE 1016579)
allowing any JRDF object to be added/removed or used in a find/contains.
This should be the semantics for all implementations of Graph.
* The iterators returned by the in memory Graph implementation can now have
remove called on them (RFE 1027563).

JRDF Release 0.3.1
==================
* Bug fixes to the in memory implementation: creating the same Literal by
value resulted in a different node ID (1014115) and preventing one in
memory graph adding nodes to another in memory graph (1014054).
* Updated javadoc for Graph.

JRDF Release 0.3
================
* New memory implementation by Paul Gearon.
* Abstract unit tests to test implementations.
* Split out NodeFactory into TripleFactory and GraphElementFactory.
* Added Container (Bag, Alternative and Sequence support) and Collection
support.
* Added visitor pattern for typed nodes (URIReference, BlankNode and
Literals).
* Creating literals is restricted to only valid construction: lexical value,
lexical value and datatype or lexical value and language.
* AbstractLiteral now has a getEscapedForm which returns an N-Triples
escaped version of the Literal.  The toString now simply returns
getLexicalValue (no escaping).
* Modified AbstractURIReference to allow unchecked URIs to be added.
* Added AbstractBlankNode.

JRDF Release 0.2.1
==================
* AbstractLiteral has improved toString.
* AbstractURIReference has a constructor that enforces a non-null URI.
* Graph now has find, getNumberOfTriples and isEmpty methods.
* Triple and Nodes are now Serializable.
* NodeFactory now supports reification.
* Added ClosableIterator for results.
* Added RDF and RDFS vocabularies.

JRDF Release 0.2
================
* Node, SubjectNode, PredicateNode and ObjectNode marker interfaces.
* Renaming of Statement to Triple and other renaming.
* Defining hashCode and equals.
* Reification added to NodeFactory.