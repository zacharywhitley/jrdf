Package org.jrdf.urql.parser;

/*
 * SPARQL Query Language for RDF SableCC grammar.
 * $Id$
 */

Helpers
  character  = [0..0xFFFF];
  letter     = ['a'..'z'] | ['A'..'Z'];
  digit      = ['0'..'9'];
  tab        = 9;
  lf         = 10;
  cr         = 13;
  dbquote    = 34;
  quote      = 39;
  sl         = 47;
  whitespace = ' ' | tab | lf | cr;
  nonblank   = [33..126];
  nonquote   = [character - [quote + '\']];
  nondbquote = [character - [dbquote + '\']];
  nonslash   = [[33..126] - sl];
  urlchar    = [character - '>'];
  echar      = 't' | 'b' | 'n' | 'r' | 'f' | '\' | dbquote | quote;
  digitstart = digit+ '.' digit* | '.' digit+ | digit+;

States
  def,      /* default state */
  com,      /* comment */
  var,      /* escaping variable name with '?' or '$' */
  qesc,     /* escaping character in quoted literal with '\' */
  dbqesc,   /* escaping character in double quoted literal with '\' */
  qlit,     /* quoted literal */
  dbqlit,   /* double quoted literal */
  lang;     /* language tag after literal */

Tokens
  {def}                prefix           = ('PREFIX' | 'prefix');
  {def}                select           = ('SELECT' | 'select');
  {def}                where            = ('WHERE' | 'where');
  {def}                union            = ('UNION' | 'union');
  {def}                optional         = ('OPTIONAL' | 'optional');
  {def}                filter           = ('FILTER' | 'filter');
  {def}                str_call         = ('STR' | 'str');
  {def}                lang_call        = ('LANG' | 'lang');
  {def}                datatype_call    = ('DATATYPE' | 'datatype');
  {def}                is_iri_call      = ('isIRI');
  {def}                is_uri_call      = ('isURI');
  {def}                is_blank_call    = ('isBLANK');
  {def}                is_literal_call  = ('isLITERAL');

  {def->com}                      hash           = '#';
  {com}                           comment        = [character - [lf + cr]];
  {com->def}                      endcomment     = (lf | cr)+;
  {def->var}                      variableprefix = ('?' | '$');
  {var->def}                      variablename   = letter (letter | digit | '_' | '$' | '?' )*;
  {def}                           asterisk       = '*';
  {def}                           identifier     = letter (letter | digit | '_' | '$' | '?' )*;
  {def}                           blank          = whitespace+;
  {def}                           terminator     = ';';
  {def}                           colon          = ':';
  {def}                           lpar           = '{';
  {def}                           rpar           = '}';
  {def}                           period         = '.';
  {def}                           plus           = '+';
  {def}                           minus          = '-';
  {def}                           doublepipe     = '||';
  {def}                           doubleamp      = '&&';
  {def}                           integer        = digit+;
  {def}                           decimal        = digit+ '.' digit* | '.' digit+;
  {def}                           double         = digitstart ('e' | 'E') digit+;

  {def}                           resource       = '<' urlchar* '>';
  {def}                           lbracket       = '(';
  {def}                           rbracket       = ')';
  {def}                           equals         = '=';
  {def}                           nequals        = '!=';
  {def}                           lt             = '<';
  {def}                           lte            = '<=';
  {def}                           gt             = '>';
  {def}                           gte            = '>=';

  {def->qlit, qlit->def}          quote          = quote;
  {qlit}                          qtext          = nonquote+;
  {qlit->qesc}                    qescape        = '\';
  {qesc->qlit}                    qescapedtext   = character;

  {def->dbqlit, dbqlit->def}      dbquote        = dbquote;
  {dbqlit}                        dbqtext        = nondbquote+;
  {dbqlit->dbqesc}                dbqescape      = '\';
  {dbqesc->dbqlit}                dbqescapedtext = character;

  {def->lang}                     at             = '@';
  {lang->def}                     langtag        = letter+ ('-' | letter)*;

  {def}                           datatypeprefix = '^^';

Ignored Tokens
  blank, comment, qescape, dbqescape, endcomment, hash;

Productions
  start =
    {query} prolog select_clause where_clause?;

  prolog =
    {prefixdecl} prefixdecl* ;

  prefixdecl =
    {prefix} prefix identifier? colon resource ;

  select_clause =
    {variable_list} select variable+ |
    {wildcard} select asterisk ;

  where_clause =
    where? group_graph_pattern;

  group_graph_pattern =
    lpar graph_pattern rpar ;

  graph_pattern =
    {filtered_basic_graph_pattern} filtered_basic_graph_pattern operation_pattern? ;

  filtered_basic_graph_pattern =
    {block_of_triples} block_of_triples? ;

  block_of_triples =
    triple period? more_triples* ;

  more_triples =
    triple period? ;

  operation_pattern =
     {graph_pattern_or_filter_graph_pattern} graph_pattern_or_filter period? graph_pattern ;

  graph_pattern_or_filter =
    {graph_pattern_not_triples} graph_pattern_not_triples |
    {filter_pattern} filter_pattern;

  graph_pattern_not_triples =
    {optional_graph_pattern} optional_graph_pattern |
    {group_or_union_graph_pattern} group_or_union_graph_pattern ;

  optional_graph_pattern =
    optional group_graph_pattern ;

  group_or_union_graph_pattern =
    group_graph_pattern union_graph_pattern* ;

  union_graph_pattern =
    union group_graph_pattern ;

  filter_pattern =
    filter constraint;

  triple =
    [subject]:resource_triple_element [predicate]:resource_triple_element [object]:object_triple_element ;

  resource_triple_element =
    {resource} resource |
    {qname} qname_element |
    {variable} variable ;

  object_triple_element =
    {resource} resource |
    {qname} qname_element |
    {variable} variable |
    {literal} literal  ;

  qname_element =
      {qname} [ncname_prefix]:identifier colon [nc_name]:identifier;

  variable =
    variableprefix variablename;

  literal =
    {rdf_literal} rdf_literal |
    {numeric_literal} numeric_literal |
    {boolean_literal} boolean_literal;

  rdf_literal =
    {untyped_literal} literal_value |
    {lang_literal} literal_value at [language]:langtag |
    {typed_literal} literal_value datatype ;

  literal_value =
      {quoted_literal} [opening_quote]:quote quoted_strand* [closing_quote]:quote |
      {db_quoted_literal} [opening_db_quote]:dbquote db_quoted_strand* [closing_db_quote]:dbquote;

  quoted_strand =
    {quoted_unescaped} qtext |
    {quoted_escaped} qescapedtext;

  db_quoted_strand =
    {db_quoted_unescaped} dbqtext |
    {db_quoted_escaped} dbqescapedtext;

  datatype =
    {resource_datatype} datatypeprefix resource |
    {qname_datatype} datatypeprefix qname_element;

  numeric_literal =
    {unsigned_numeric_literal} unsigned_numeric_literal |
    {positive_numeric_literal} plus unsigned_numeric_literal |
    {negative_numeric_literal} minus unsigned_numeric_literal;

  unsigned_numeric_literal =
    {integer} integer |
    {decimal} decimal |
    {double} double;

  boolean_literal = identifier;

  constraint =
    {builtincall} builtincall |
    {bracketed_expression} bracketed_expression;

  builtincall =
    {str} str_call bracketed_expression |
    {lang} lang_call bracketed_expression |
    {datatype} datatype_call bracketed_expression |
    {isiri} is_iri_call bracketed_expression |
    {isuri} is_uri_call bracketed_expression |
    {isblank} is_blank_call bracketed_expression |
    {isliteral} is_literal_call bracketed_expression ;

  bracketed_expression =
    lbracket conditional_or_expression rbracket;

  conditional_or_expression =
    conditional_and_expression more_conditional_and_expression*;

  more_conditional_and_expression =
    doublepipe conditional_and_expression;

  conditional_and_expression =
    value_logical more_value_logical*;

  more_value_logical =
    doubleamp value_logical;

  value_logical =
    relational_expression;

  relational_expression =
    numeric_expression more_numeric_expression?;

  numeric_expression =
    additive_expression;

  additive_expression =
    multiplicative_expression;

  multiplicative_expression =
    primary_expression;

  primary_expression =
    {rdf_literal} rdf_literal |
    {numeric_literal} numeric_literal |
    {boolean_literal} boolean_literal |
    {variable} variable |
    {builtincall} builtincall;

  more_numeric_expression =
    {e} equals numeric_expression |
    {ne} nequals numeric_expression |
    {lt} lt numeric_expression |
    {gt} gt numeric_expression |
    {lte} lte numeric_expression |
    {gte} gte numeric_expression;
