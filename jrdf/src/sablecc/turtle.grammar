Package org.jrdf.parser.turtle.parser;

/*
 * Turtle SableCC grammar.
 * $Id: turtle.grammar 3164 2009-10-31 20:54:58Z newmana $
 */

Helpers
  character  = [0..0xFFFF];
  letter     = ['a'..'z'] | ['A'..'Z'];
  digit      = ['0'..'9'];
  tab        = 9;
  lf         = 10;
  cr         = 13;
  dbquote    = 34;
  quote      = 39;
  sl         = 47;
  whitespace = ' ' | tab | lf | cr;
  nonblank   = [33..126];
  otherchars = [0x00C0..0x00D6] | [0x00D8..0x00F6] | [0x00F8..0x02FF] | [0x0370..0x037D] | [0x037F..0x1FFF] |
               [0x200C..0x200D] | [0x2070..0x218F] | [0x2C00..0x2FEF] | [0x3001..0xD7FF] | [0xF900..0xFDCF] |
               [0xFDF0..0xFFFD] ;
  nondbquote = [character - [dbquote + '\']];
  nonslash   = [[33..126] - sl];
  urlchar    = [character - '>'];
  echar      = 't' | 'b' | 'n' | 'r' | 'f' | '\' | dbquote | quote;
  digitstart = digit+ '.' digit* | '.' digit+ | digit+;
  namestart  = letter | '_' | otherchars;
  namechar   = namestart | '-' | digit | 0x00B7 | [0x0300..0x036F] | [0x203F..0x2040];
  prefixnamestart = letter | otherchars;

States
  def,         /* default state */
  qnameprefix, /* qname prefix */
  inprefix,    /* prefix */
  inbase,      /* base prefix */
  bnodeprefix, /* bnode prefix */
  dbqesc,      /* escaping character in double quoted literal with '\' */
  trqesc,      /* escaping character in triple quoted literal with '\' */
  dbqlit,      /* double quoted literal */
  trqlit,      /* triple quoted literal */
  lang,        /* language tag after literal */
  com;         /* comment */

Tokens
  {def->inprefix}      prefix           = '@prefix';
  {def->inbase}        base             = '@base';
  {def}                verb_a           = ' a ';
  {def}                stmt_separator   = '.';
  {def}                node_separator  = ';';
  {def}                comma            = ',';
  {def}                plus             = '+';
  {def}                minus            = '-';
  {def}                true_literal     = 'true';
  {def}                false_literal    = 'false';
  {def}                empty_blank_node = '[]';
  {def}                start_blank_node = '[';
  {def}                end_blank_node   = ']';
  {def}                start_items      = '(';
  {def}                end_items        = ')';

  {def, inprefix, inbase, qnameprefix->def}  blank           = whitespace+;
  {inprefix, def->qnameprefix}               prefix_name     = prefixnamestart namechar*;
  {inprefix, qnameprefix, def->qnameprefix}  colon           = ':';
  {qnameprefix->def}                         name            = namestart namechar*;
  {inprefix->def, inbase->def, def}          uri_ref         = '<' urlchar* '>';

  {def->com}                      hash           = '#';
  {com}                           comment        = [character - [lf + cr]];
  {com->def}                      endcomment     = (lf | cr)+;

  {def->bnodeprefix}              node_id_prefix    = '_:';
  {bnodeprefix->def}              node_id           = namestart namechar*;

  {def}                           integer        = digit+;
  {def}                           decimal        = digit+ '.' digit* | '.' digit+;
  {def}                           double         = digitstart ('e' | 'E') digit+;

  {def->dbqlit, dbqlit->def}      db_quote          = dbquote;
  {dbqlit}                        db_q_text         = nondbquote+;
  {dbqlit->dbqesc}                db_q_escape       = '\';
  {dbqesc->dbqlit}                db_q_escaped_text = character;

  {def->trqlit, trqlit->def}      tr_quote          = dbquote dbquote dbquote;
  {trqlit}                        tr_q_text         = nondbquote+ | tab | lf | cr;
  {trqlit->trqesc}                tr_q_escape       = '\';
  {trqesc->trqlit}                tr_q_escaped_text = character;

  {def->lang}                     at             = '@';
  {lang->def}                     langtag        = letter+ ('-' | letter)*;

  {def}                           datatypeprefix = '^^';

Ignored Tokens
  blank, hash, comment, endcomment, db_q_escape, tr_q_escape;

Productions
  start =
    {statements} statement*;

  statement =
    {directive_stmt} directive stmt_separator |
    {triples_stmt} triples stmt_separator ;

  directive =
    {prefix_id_directive} prefix prefix_name? colon uri_ref |
    {base_directive} base uri_ref;

  triples =
    subject predicate_object_list;

  predicate_object_list =
    verb object_list verb_object_list* node_separator?;

  verb =
    {a_verb} verb_a |
    {predicate_verb} predicate;

  object_list =
    object more_objects*;

  more_objects =
    comma object;

  verb_object_list =
    node_separator verb object_list;

  subject =
    {subject_uriref} resource |
    {subject_blank} blank_node;

  predicate =
    {predicate_uriref} resource;

  object =
    {object_uriref} resource |
    {object_blank} blank_node |
    {object_literal} literal;

  blank_node =
    {blank_node_with_id} node_id_prefix node_id |
    {empty_blank_node} empty_blank_node |
    {node_predicate_object_list} start_blank_node predicate_object_list end_blank_node |
    {collection} collection;

  resource =
    uri_ref |
    {prefixed_name} qname_element;

  qname_element =
      [ncname_prefix]:prefix_name? colon [nc_name]:name?;

  literal =
    {rdf_literal} rdf_literal |
    {numeric_literal} numeric_literal |
    {boolean_literal} boolean_literal;

  rdf_literal =
    {untyped_literal} literal_value |
    {lang_literal} literal_value at [language]:langtag |
    {typed_literal} literal_value datatypeprefix resource ;

  literal_value =
    {db_quoted_literal} [opening_db_quote]:db_quote db_quoted_strand* [closing_db_quote]:db_quote |
    {long_db_quoted_literal} [opening_quote]:tr_quote long_db_quoted_strand* [closing_quote]:tr_quote;

  db_quoted_strand =
    {db_quoted_unescaped} db_q_text |
    {db_quoted_escaped} db_q_escaped_text;

  long_db_quoted_strand =
    {triple_quoted_unescaped} tr_q_text |
    {triple_quoted_escaped} tr_q_escaped_text;

  numeric_literal =
    {unsigned_numeric_literal} unsigned_numeric_literal |
    {positive_numeric_literal} plus unsigned_numeric_literal |
    {negative_numeric_literal} minus unsigned_numeric_literal;

  unsigned_numeric_literal =
    {integer} integer |
    {decimal} decimal |
    {double} double;

  boolean_literal =
    {true} true_literal |
    {false} false_literal ;

  collection =
    {collection_items} start_items items? end_items;

  items =
    {item_objects} object+;
